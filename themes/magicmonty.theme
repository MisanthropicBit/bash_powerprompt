#!/usr/bin/env bash

# This is based on the default theme of magicmonty's bash git prompt
#
# Requirements:
#     - 16 color support
#     - Powerline font installed
#     - Unicode support

__bpp_set_theme() {
    __load_utility "git"

    local red="31"
    local green="32"
    local yellow="33"
    local blue="34"
    local purple="35"
    local cyan="36"
    local bright="${BPP_THEME_MAGICMONTY_BRIGHT:=0}"

    if [ "$bright" -eq 1 ]; then
        red="31;1"
        green="32;1"
        yellow="33;1"
        blue="34;1"
        purple="35;1"
        cyan="36;1"
    fi

    BASH_POWERPROMPT_THEME='magicmonty'
    BASH_POWERPROMPT_COLOR_FORMAT=$BASH_POWERPROMPT_COLOR_FORMAT_16
    BASH_POWERPROMPT_FG_COLORS=($yellow '')
    BASH_POWERPROMPT_BG_COLORS=()
    BASH_POWERPROMPT_LEFT_PADDING=('' '')
    BASH_POWERPROMPT_RIGHT_PADDING=('' '')
    BASH_POWERPROMPT_SEPARATORS=('' '')

    # Unicode symbols used for git status
    local modified_symbol="+"
    local ahead_symbol="\xe2\x86\x91"     # ↑
    local behind_symbol="\xe2\x86\x93"    # ↓
    local conflict_symbol="\xe2\x9c\x96"  # ✖
    local clean_symbol="\xe2\x9c\x94"     # ✔
    local staged_symbol="\xe2\x97\x8f"    # ●
    local stashed_symbol="\xe2\x9a\x91"   # ⚑
    local untracked_symbol="\xe2\x80\xa6" # …

    local git_state_format="${RESET_ATTRIBUTES}[${BASH_POWERPROMPT_COLOR_FORMAT_16}%s%s${RESET_ATTRIBUTES}|${BASH_POWERPROMPT_COLOR_FORMAT_16}%s${RESET_ATTRIBUTES}]"
    local git_branch="$(__git_branch)"
    local git_state=""

    if [ -n "$git_branch" ]; then
        # Get all git states
        IFS=" " read -ra git_states <<< "$(__git_states)"

        local ahead="$(__git_ahead)"
        local behind="$(__git_behind)"
        local ahead_behind_state=""

        if [ "$ahead" -gt 0 ]; then
            ahead_behind_state="$ahead_symbol$ahead"
        fi

        if [ "$behind" -gt 0 ]; then
            ahead_behind_state="$ahead_behind_state$behind_symbol$behind"
        fi

        # Get number of untracked and stashed files. These counts are used regardless
        # of whether or not the branch is clean or dirty
        if [ "${git_states[4]}" -gt 0 ]; then
            local stashed_state="$(printf "${BASH_POWERPROMPT_COLOR_FORMAT_16}${stashed_symbol}${git_states[4]}${RESET_ATTRIBUTES}" $green '')"
        fi

        if [ "${git_states[5]}" -gt 0 ]; then
            local untracked_state="$(printf "${BASH_POWERPROMPT_COLOR_FORMAT_16}${untracked_symbol}${RESET_ATTRIBUTES}" $cyan '')"
        fi

        if [ "${git_states[0]}" -eq 1 ]; then
            local clean_state="$(printf "${BASH_POWERPROMPT_COLOR_FORMAT_16}$clean_symbol${RESET_ATTRIBUTES}$git_state" $green '')"
            git_state="$(printf "$git_state_format" $purple '' $git_branch "$(printf "$ahead_behind_state")" $blue '' "$clean_state$untracked_state$stashed_state")"
        else
            # Staged files (red)
            if [ "${git_states[1]}" -gt 0 ]; then
                git_state="$(printf "${git_state}${BASH_POWERPROMPT_COLOR_FORMAT_16}${staged_symbol}${git_states[1]}${RESET_ATTRIBUTES}" $red '')"
            fi

            # Modified files (blue)
            if [ "${git_states[2]}" -gt 0 ]; then
                git_state="$(printf "${git_state}${BASH_POWERPROMPT_COLOR_FORMAT_16}${modified_symbol}${git_states[2]}${RESET_ATTRIBUTES}" $blue '')"
            fi

            # Conflicted files (red)
            if [ "${git_states[3]}" -gt 0 ]; then
                git_state="$(printf "${git_state}${BASH_POWERPROMPT_COLOR_FORMAT_16}${conflict_symbol}${git_states[3]}${RESET_ATTRIBUTES}" $red '')"
            fi

            git_state="$(printf "$git_state_format" $purple '' $git_branch "$(printf "$ahead_behind_state")" $blue '' "$(printf "$git_state$untracked_state$stashed_state")")"
        fi

        # Add a space as separator between the two sections
        BASH_POWERPROMPT_SEPARATORS[0]=' '
    fi

    BASH_POWERPROMPT_SECTIONS=(
        "\w"
        "$git_state"
    )
}
