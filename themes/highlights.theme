#!/usr/bin/env bash

# Requirements:
#     - True-color support
#     - Powerline font installed
#     - Unicode support

__bpp_set_theme() {
    __load_utility "utils"

    BASH_POWERPROMPT_THEME='highlights'
    BASH_POWERPROMPT_COMMAND_SYMBOL=""
    BASH_POWERPROMPT_COLOR_FORMAT=$BASH_POWERPROMPT_COLOR_FORMAT_TRUECOLOR
    BASH_POWERPROMPT_LEFT_PADDING=(' ' ' ' '' ' ')
    BASH_POWERPROMPT_RIGHT_PADDING=(' ' ' ' ' ' ' ')
    BASH_POWERPROMPT_SEPARATOR_FG_COLORS=()
    BASH_POWERPROMPT_SEPARATOR_BG_COLORS=()
    BASH_POWERPROMPT_SEPARATORS=(
        $BASH_POWERPROMPT_SOLID_ARROW_SYMBOL
        ''
        $BASH_POWERPROMPT_SOLID_ARROW_SYMBOL
    )

    local white="255;255;255"
    local blue_highlight="19;145;218"
    local pink_highlight="239;45;159"
    local fg_color="200;200;200"
    local bg_color="69;69;69"
    local gray1="85;85;85"
    local gray2="150;150;150"
    local gray3="180;180;180"

    BASH_POWERPROMPT_FG_COLORS=($fg_color $fg_color $white)
    BASH_POWERPROMPT_BG_COLORS=($gray1 $blue_highlight $pink_highlight)

    # TODO: Either do this or simply set each path element as a unique section
    # if we can combine arrays in bash
    IFS='/' read -ra path_array <<< "$(__get_cwd)"

    if [ "${path_array[0]}" = "~" ]; then
        # Slice off the tilde
        path_array=("${path_array[@]:1}")
    fi

    local color_format=$BASH_POWERPROMPT_COLOR_FORMAT_TRUECOLOR
    local sep=$(printf "${color_format}$BASH_POWERPROMPT_THIN_ARROW_SYMBOL${color_format} " $gray2 $bg_color $gray3 $bg_color)
    local arrow_format="${color_format}${BASH_POWERPROMPT_SOLID_ARROW_SYMBOL}"
    local max_split_index=$((${BPP_THEME_HIGHLIGHTS_MAX_SPLITS:=3} - 1))
    local new_path=$(printf $color_format $fg_color $blue_highlight)

    # Handling special cases separately simplifies the loop in the general case
    case "${#path_array[@]}" in
        0)
            new_path="${newpath}$(printf $arrow_format $blue_highlight $pink_highlight)"
            ;;
        1)
            new_path="${newpath}$(printf $color_format $white $blue_highlight)${path_array[0]}"
            new_path="${newpath} $(printf $arrow_format $blue_highlight $pink_highlight)"
            ;;
        2)
            new_path="${new_path}$(printf $color_format $white $blue_highlight)${path_array[0]}"
            new_path="${new_path} $(printf $arrow_format $blue_highlight $bg_color)"

            new_path="${new_path}$(printf $color_format $fg_color $bg_color) ${path_array[1]}"
            new_path="${new_path} $(printf $arrow_format $bg_color $pink_highlight)"
            ;;
        *)
            new_path="${newpath}$(printf $color_format $white $blue_highlight)${path_array[0]}"

            # Handle color transition between blue part of path and grey parts
            new_path="$new_path $(printf $arrow_format $blue_highlight $bg_color) "
            new_path="$new_path$(printf $color_format $fg_color $bg_color)${path_array[1]} $sep"

            # TODO: Clean up loop logic
            for ((i=2; i<=${#path_array[@]}-2; ++i)); do
                if [ -z "${path_array[i]}" ]; then
                    continue
                elif [ "$i" -eq $max_split_index ]; then
                    new_path="$new_path... $sep"
                else
                    new_path="${new_path}${path_array[i]} $sep"
                fi
            done

            # Last part of path that transitions to pink
            new_path="${new_path}$(printf $color_format $fg_color $bg_color)${path_array[i]}"
            new_path="${new_path} $(printf $arrow_format $bg_color $pink_highlight)"
            ;;
    esac

    local lightning_symbol="\xe2\x9a\xa1"

    # Use two spaces between lightning symbol and job count
    local jobs=$(printf "$lightning_symbol  \j")

    BASH_POWERPROMPT_SECTIONS=(
        "\u"
        "$new_path"
        "$jobs"
    )
}
